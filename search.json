[{"path":"https://wurli.github.io/acadyr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 acadyr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://wurli.github.io/acadyr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jacob Scott. Author, maintainer.","code":""},{"path":"https://wurli.github.io/acadyr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Scott J (2024). acadyr: Convenience Functions Working Non-Calendar Years R. R package version 0.1.0, https://wurli.github.io/acadyr/, https://wurli.github.io/acadyr/.","code":"@Manual{,   title = {acadyr: Convenience Functions for Working With Non-Calendar Years in R},   author = {Jacob Scott},   year = {2024},   note = {R package version 0.1.0, https://wurli.github.io/acadyr/},   url = {https://wurli.github.io/acadyr/}, }"},{"path":"https://wurli.github.io/acadyr/index.html","id":"acadyr","dir":"","previous_headings":"","what":"Convenience Functions for Working With Non-Calendar Years in R","title":"Convenience Functions for Working With Non-Calendar Years in R","text":"{acadyr} provides utility functions creating working financial academic years R: data types also play nicely {ggplot2}:","code":"library(acadyr) library(dplyr, warn.conflicts = FALSE) library(ggplot2)  revenue <- tibble(   date = seq.Date(as.Date(\"2020-01-01\"), as.Date(\"2022-01-01\"), by = \"3 months\"),   financial_year = financial_year(date),   academic_year = academic_year(date),   revenue = rnorm(9, 10000, 1000) )  revenue #> # A tibble: 9 × 4 #>   date       financial_year academic_year revenue #>   <date>               <fy>          <ay>   <dbl> #> 1 2020-01-01        2019-20       2019/20  10066. #> 2 2020-04-01        2020-21       2019/20   9188. #> 3 2020-07-01        2020-21       2019/20   9902. #> 4 2020-10-01        2020-21       2020/21   9512. #> 5 2021-01-01        2020-21       2020/21   9276. #> 6 2021-04-01        2021-22       2020/21  10309. #> 7 2021-07-01        2021-22       2020/21  10409. #> 8 2021-10-01        2021-22       2021/22   9987. #> 9 2022-01-01        2021-22       2021/22   9639. revenue |>    ggplot(aes(financial_year, revenue)) +   geom_bar(stat = \"summary\", fun = \"sum\") +   labs(     title = \"Revenue by Financial Year\",     subtitle = \"X-axis labels are nicely formatted by default\"   )"},{"path":"https://wurli.github.io/acadyr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Convenience Functions for Working With Non-Calendar Years in R","text":"acadyr yet CRAN can install GitHub using {pak}:","code":"# install.packages(\"pak\") pak::pak(\"wurli/acadyr\")"},{"path":"https://wurli.github.io/acadyr/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation?","title":"Convenience Functions for Working With Non-Calendar Years in R","text":"Non-calendar year types can cause headaches everyday analysis several reasons: (usually) don’t begin January 1st, meaning don’t integrate easily date classes Formatting display pain Different use cases may require financial/academic years roll different times. example, UK financial year begins April 1st, Australian financial year begins July 1st","code":""},{"path":"https://wurli.github.io/acadyr/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Convenience Functions for Working With Non-Calendar Years in R","text":"package powered {vctrs}, creation largely informed excellent accompanying documentation","code":""},{"path":"https://wurli.github.io/acadyr/reference/academic_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Utilities for working with academic years — academic_year","title":"Utilities for working with academic years — academic_year","text":"Utilities working academic years","code":""},{"path":"https://wurli.github.io/acadyr/reference/academic_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utilities for working with academic years — academic_year","text":"","code":"academic_year(   x = integer(),   boundary = getOption(\"acadyr.academic_year_boundary\", as.Date(\"2020-09-01\")) )  is_academic_year(x)  as_academic_year(   x,   boundary = getOption(\"acadyr.academic_year_boundary\", as.Date(\"2020-09-01\")),   ... )"},{"path":"https://wurli.github.io/acadyr/reference/academic_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utilities for working with academic years — academic_year","text":"x academic_year(): numeric vector as_academic_year(): object coerce is_academic_year(): object test boundary boundary date new academic year begin. Note month/day date used. can set using global option acadyr.academic_year_boundary. E.g. use academic years starting August 1, use following:   ... Passed methods academic_year(): <financial_year> vector as_academic_year(): <financial_year> vector is_academic_year(): <logical> vector","code":"options(acadyr.academic_year_boundary = as.Date(\"2020-08-01\"))"},{"path":"https://wurli.github.io/acadyr/reference/academic_year.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Utilities for working with academic years — academic_year","text":"Note many countries use slightly different academic year start date year, meaning use-cases utilities necessitate approximation.","code":""},{"path":"https://wurli.github.io/acadyr/reference/academic_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utilities for working with academic years — academic_year","text":"","code":"# Numbers are treated as if they represent years academic_year(2005:2015) #> <academic_year[11]> #>  [1] 2005/06 2006/07 2007/08 2008/09 2009/10 2010/11 2011/12 2012/13 2013/14 #> [10] 2014/15 2015/16  # Dates are mapped to the year they fall within dates <- as.Date(c(\"2020-08-01\", \"2020-09-01\")) academic_year(dates) #> <academic_year[2]> #> [1] 2019/20 2020/21  # The year they fall within depends on the year boundary, which # defaults to September 01 academic_year(dates, boundary = as.Date(\"2020-08-01\")) #> <academic_year[2]> #> [1] 2020/21 2020/21  # as_academic_year() also understands character vectors: as_academic_year(c(\"2020/21\", \"2021/22\")) #> <academic_year[2]> #> [1] 2020/21 2021/22"},{"path":"https://wurli.github.io/acadyr/reference/acadyr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"acadyr: Convenience Functions for Working With Non-Calendar Years in R — acadyr-package","title":"acadyr: Convenience Functions for Working With Non-Calendar Years in R — acadyr-package","text":"Provides S3 classes working academic financial year data types.","code":""},{"path":"https://wurli.github.io/acadyr/reference/acadyr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"acadyr: Convenience Functions for Working With Non-Calendar Years in R — acadyr-package","text":"Maintainer: Jacob Scott jscott2718@gmail.com","code":""},{"path":"https://wurli.github.io/acadyr/reference/financial_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Utilities for working with financial years — financial_year","title":"Utilities for working with financial years — financial_year","text":"Utilities working financial years","code":""},{"path":"https://wurli.github.io/acadyr/reference/financial_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utilities for working with financial years — financial_year","text":"","code":"financial_year(   x = integer(),   boundary = getOption(\"acadyr.financial_year_boundary\", as.Date(\"2020-04-01\")) )  is_financial_year(x)  as_financial_year(   x,   boundary = getOption(\"acadyr.financial_year_boundary\", as.Date(\"2020-04-01\")),   ... )"},{"path":"https://wurli.github.io/acadyr/reference/financial_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utilities for working with financial years — financial_year","text":"x financial_year(): numeric vector as_financial_year(): object coerce is_financial_year(): object test boundary boundary date new financial year begin. Note month/day date used. can set using global option acadyr.financial_year_boundary. E.g. use financial years starting January 1 (used Vietnam, United Arab Emirates, Ukraine etc), use following:   ... Passed methods","code":"options(acadyr.financial_year_boundary = as.Date(\"2020-01-01\"))"},{"path":"https://wurli.github.io/acadyr/reference/financial_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utilities for working with financial years — financial_year","text":"financial_year(): <financial_year> vector as_financial_year(): <financial_year> vector is_financial_year(): <logical> vector","code":""},{"path":"https://wurli.github.io/acadyr/reference/financial_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utilities for working with financial years — financial_year","text":"","code":"# Numbers are treated as if they represent years financial_year(2005:2015) #> <financial_year[11]> #>  [1] 2005-06 2006-07 2007-08 2008-09 2009-10 2010-11 2011-12 2012-13 2013-14 #> [10] 2014-15 2015-16  # Dates are mapped to the year they fall within dates <- as.Date(c(\"2020-03-01\", \"2020-05-01\")) financial_year(dates) #> <financial_year[2]> #> [1] 2019-20 2020-21  # The year they fall within depends on the year boundary, which # defaults to April 01 financial_year(dates, boundary = as.Date(\"2020-01-01\")) #> <financial_year[2]> #> [1] 2020-21 2020-21  # as_financial_year() also understands character vectors: as_financial_year(c(\"2020-21\", \"2021-22\")) #> <financial_year[2]> #> [1] 2020-21 2021-22"},{"path":"https://wurli.github.io/acadyr/reference/scale_x_academic_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Position scales for academic years — scale_x_academic_year","title":"Position scales for academic years — scale_x_academic_year","text":"Position scales academic years","code":""},{"path":"https://wurli.github.io/acadyr/reference/scale_x_academic_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Position scales for academic years — scale_x_academic_year","text":"","code":"scale_x_academic_year(labels = ~format(academic_year(.)), ...)  scale_y_academic_year(labels = ~format(academic_year(.)), ...)"},{"path":"https://wurli.github.io/acadyr/reference/scale_x_academic_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Position scales for academic years — scale_x_academic_year","text":"labels, ... Passed ggplot2::scale_(x|y)_continuous()","code":""},{"path":"https://wurli.github.io/acadyr/reference/scale_x_financial_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Position scales for financial years — scale_x_financial_year","title":"Position scales for financial years — scale_x_financial_year","text":"Position scales financial years","code":""},{"path":"https://wurli.github.io/acadyr/reference/scale_x_financial_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Position scales for financial years — scale_x_financial_year","text":"","code":"scale_x_financial_year(labels = ~format(financial_year(.)), ...)  scale_y_financial_year(labels = ~format(financial_year(.)), ...)"},{"path":"https://wurli.github.io/acadyr/reference/scale_x_financial_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Position scales for financial years — scale_x_financial_year","text":"labels, ... Passed ggplot2::scale_(x|y)_continuous()","code":""},{"path":"https://wurli.github.io/acadyr/reference/set_year_boundary.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the boundary when a new year begins — set_year_boundary","title":"Set the boundary when a new year begins — set_year_boundary","text":"Set boundary new year begins","code":""},{"path":"https://wurli.github.io/acadyr/reference/set_year_boundary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the boundary when a new year begins — set_year_boundary","text":"","code":"set_year_boundary(x, value)  year_boundary(x) <- value"},{"path":"https://wurli.github.io/acadyr/reference/set_year_boundary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the boundary when a new year begins — set_year_boundary","text":"x academic/financial year object value date","code":""},{"path":"https://wurli.github.io/acadyr/news/index.html","id":"acadyr-010","dir":"Changelog","previous_headings":"","what":"acadyr 0.1.0","title":"acadyr 0.1.0","text":"Add pkgdown site","code":""}]
